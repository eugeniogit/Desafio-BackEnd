// <auto-generated />
using System;
using MTT.Infra.Data.Rental;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MTT.Infra.Data.Rental.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    partial class RentalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MTT.Domain.Rental.Entities.Moto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Model")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Tag")
                        .IsUnique();

                    b.ToTable("Moto");
                });

            modelBuilder.Entity("MTT.Domain.Rental.Entities.Motoboy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.ToTable("Motoboy");
                });

            modelBuilder.Entity("MTT.Domain.Rental.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotoboyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MotoId");

                    b.HasIndex("MotoboyId");

                    b.ToTable("Rental");
                });

            modelBuilder.Entity("MTT.Domain.Rental.Entities.Motoboy", b =>
                {
                    b.OwnsOne("MTT.Domain.Rental.ValueObjects.CNH", "CNH", b1 =>
                        {
                            b1.Property<Guid>("MotoboyId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Categoty")
                                .HasColumnType("integer");

                            b1.Property<int>("Number")
                                .HasColumnType("integer");

                            b1.HasKey("MotoboyId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("Motoboy");

                            b1.WithOwner()
                                .HasForeignKey("MotoboyId");
                        });

                    b.Navigation("CNH")
                        .IsRequired();
                });

            modelBuilder.Entity("MTT.Domain.Rental.Entities.Rental", b =>
                {
                    b.HasOne("MTT.Domain.Rental.Entities.Moto", "Moto")
                        .WithMany("Rentals")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTT.Domain.Rental.Entities.Motoboy", "Motoboy")
                        .WithMany("Rentals")
                        .HasForeignKey("MotoboyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moto");

                    b.Navigation("Motoboy");
                });

            modelBuilder.Entity("MTT.Domain.Rental.Entities.Moto", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("MTT.Domain.Rental.Entities.Motoboy", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
